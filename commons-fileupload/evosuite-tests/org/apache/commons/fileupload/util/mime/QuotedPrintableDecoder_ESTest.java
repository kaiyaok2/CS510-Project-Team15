/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 14:29:38 GMT 2024
 */

package org.apache.commons.fileupload.util.mime;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStream;
import org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class QuotedPrintableDecoder_ESTest extends QuotedPrintableDecoder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte)13;
      byteArray0[5] = (byte)13;
      try { 
        QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid quoted printable encoding; CR must be followed by LF
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)61;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)61);
      try { 
        QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid quoted printable encoding; truncated escape sequence
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)97;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      int int0 = QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)95;
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(0);
      int int0 = QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
      assertEquals(6, byteArrayOutputStream0.size());
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      // Undeclared exception!
      try { 
        QuotedPrintableDecoder.decode(byteArray0, (OutputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)61);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)61;
      byteArray0[2] = (byte)51;
      try { 
        QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid quoted printable encoding: not a valid hex digit: 0
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      byteArray0[1] = (byte)13;
      try { 
        QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid quoted printable encoding; CR must be followed by LF
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)61);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)61;
      try { 
        QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid quoted printable encoding; truncated escape sequence
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream((byte)61);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)61;
      try { 
        QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid quoted printable encoding: not a valid hex digit: 0
         //
         verifyException("org.apache.commons.fileupload.util.mime.QuotedPrintableDecoder", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)95;
      int int0 = QuotedPrintableDecoder.decode(byteArray0, byteArrayOutputStream0);
      assertEquals(1, byteArrayOutputStream0.size());
      assertEquals(0, int0);
  }
}
