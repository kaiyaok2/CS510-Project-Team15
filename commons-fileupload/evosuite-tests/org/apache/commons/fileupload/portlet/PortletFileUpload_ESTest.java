/*
 * This file was automatically generated by EvoSuite
 * Sat Jun 22 14:21:49 GMT 2024
 */

package org.apache.commons.fileupload.portlet;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadBase;
import org.apache.commons.fileupload.portlet.PortletFileUpload;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class PortletFileUpload_ESTest extends PortletFileUpload_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      FileItemFactory fileItemFactory0 = mock(FileItemFactory.class, new ViolatedAssumptionAnswer());
      PortletFileUpload portletFileUpload0 = new PortletFileUpload(fileItemFactory0);
      assertEquals(1024, FileUploadBase.MAX_HEADER_SIZE);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      PortletFileUpload portletFileUpload0 = PortletFileUpload.PortletFileUpload1();
      assertEquals((-1L), portletFileUpload0.getFileSizeMax());
  }
}
